{"version":3,"sources":["components/ToDoItem.js","components/ToDosList.js","components/ToDoInput.js","components/Filter.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoItem","todo","handleTodoEdit","handleDelete","date","createdAt","useState","toggleEdit","setToggleEdit","name","inputValue","setInputValue","done","ListItem","Checkbox","checked","value","uuid","color","onClick","handleDone","TextField","fullWidth","variant","autoFocus","onChange","e","target","onKeyDown","key","preventDefault","trim","handleKeyPress","onBlur","ListItemText","style","overflowWrap","primary","textAlign","secondary","IconButton","Delete","ToDosList","currentTodos","List","map","ToDoInput","handleSubmit","onSubmit","event","margin","Filter","setCurrentPage","sortByDate","sortByDone","setSortByDone","setSortByDate","Grid","container","spacing","justify","item","ButtonGroup","Button","Pagination","todosPerPage","totalTodos","currentPage","pageNumbers","i","Math","ceil","push","padding","number","length","App","instanceTodo","axios","create","baseURL","toDos","setToDos","isLoaded","setIsLoaded","errorAlert","setErrorAlert","errorStatus","setErrorStatus","errorMessage","setErrorMessage","errCatch","err","response","data","message","status","getTodos","useCallback","a","get","params","filterBy","order","getData","useEffect","post","delete","patch","handleClose","indexOfLastTodo","indexOfFirstTodo","slice","Container","maxWidth","Typography","align","alignItems","direction","CircularProgress","Snackbar","open","autoHideDuration","onClose","Alert","severity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAIO,SAASA,EAAT,GAA0D,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,aACtCC,EAAOH,EAAKI,UAClB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAASL,EAAKQ,MAAlD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAeL,mBAASL,EAAKW,MAAtBA,EAAP,oBAwBA,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAUC,QAASd,EAAKW,KACxBI,MAAOf,EAAKgB,KACZC,MAAM,UACNC,QAAS,kBARE,SAAClB,GAChBC,EAAeD,EAAKgB,KAAMP,GAAaT,EAAKW,MAOzBQ,CAAWnB,MACzBM,EACK,cAACc,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,WACRC,WAAW,EACXR,MAAON,EACPe,SAAU,SAAAC,GAAC,OAAIf,EAAce,EAAEC,OAAOX,QACtCY,UAAW,SAAAF,GAAC,OAnCL,SAACA,EAAGT,GACV,UAAVS,EAAEG,MACDH,EAAEI,iBACuB,KAAtBpB,EAAWqB,SACV7B,EAAee,EAAMP,EAAYE,GACjCJ,GAAc,KAGR,WAAVkB,EAAEG,MACFrB,GAAc,GACdG,EAAcV,EAAKQ,OAyBKuB,CAAeN,EAAGzB,EAAKgB,OACvCgB,OAtBI,WAChBzB,GAAc,GACdG,EAAcV,EAAKQ,SAsBT,cAACyB,EAAA,EAAD,CACEC,MAAO,CAACC,aAAc,cACtBC,QAASpC,EAAKQ,KACdU,QAAS,kBAAMX,GAAc,MAErC,cAAC0B,EAAA,EAAD,CACAC,MAAO,CAAEG,UAAW,SACpBC,UAAWnC,IAEX,cAACoC,EAAA,EAAD,CAAYrB,QAAS,kBAAMhB,EAAaF,EAAKgB,OAA7C,SACI,cAACwB,EAAA,EAAD,SCtDT,SAASC,EAAT,GAA+E,IAA1DC,EAAyD,EAAzDA,aAAczC,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,aAA2B,EAAbiB,WACpE,OACI,cAACwB,EAAA,EAAD,UACKD,EAAaE,KAAI,SAAC5C,GAAD,OACd,cAACD,EAAD,CAEIC,KAAMA,EACNE,aAAcA,EACdD,eAAgBA,GAHXD,EAAKgB,WCef6B,MArBf,YAAoC,IAAhBC,EAAe,EAAfA,aAChB,EAAoCzC,mBAAS,IAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAIA,OACI,sBAAMqC,SAAY,SAAAC,GACdA,EAAMnB,iBACNiB,EAAarC,GACbC,EAAc,KAHlB,SAKQ,cAACU,EAAA,EAAD,CACAC,WAAS,EACTC,QAAQ,WACR2B,OAAO,SACPzB,SAbS,SAAC,GAAc,IAAbE,EAAY,EAAZA,OAClBhB,EAAcgB,EAAOX,QAadA,MAAON,O,kBCjBhB,SAASyC,EAAT,GAA2F,IAAzEC,EAAwE,EAAxEA,eAAgBC,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,cAoC5E,OACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,gBAApC,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAC1C,QApCI,WACnBiC,EAAe,IAmCX,SACE,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ5C,QAtBA,WACE,KAAfmC,GACDC,EAAc,KAqBRrC,MAAuB,KAAfoC,EAAqB,UAAY,UACzC/B,QAAyB,KAAf+B,EAAqB,YAAc,WAF7C,iBAIA,cAACS,EAAA,EAAD,CAAQ5C,QApBC,WACC,SAAfmC,GACDC,EAAc,SAmBRrC,MAAuB,SAAfoC,EAAyB,UAAY,UAC7C/B,QAAyB,SAAf+B,EAAyB,YAAc,WAFjD,kBAIA,cAACS,EAAA,EAAD,CAAQ5C,QAlBG,WACD,WAAfmC,GACDC,EAAc,WAiBRrC,MAAuB,WAAfoC,EAA2B,UAAY,UAC/C/B,QAAyB,WAAf+B,EAA2B,YAAc,WAFnD,yBAMJ,cAACG,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ5C,QAlDM,WACF,SAAfkC,GACDG,EAAc,SAiDVtC,MAAuB,SAAfmC,EAAyB,UAAY,UAC7C9B,QAAyB,SAAf8B,EAAyB,YAAc,WAFjD,mBAIA,cAACU,EAAA,EAAD,CAAQ5C,QAhDQ,WACJ,QAAfkC,GACDG,EAAc,QA+CVtC,MAAuB,QAAfmC,EAAwB,UAAY,UAC5C9B,QAAyB,QAAf8B,EAAwB,YAAc,WAFhD,6B,sCC1DP,SAASW,EAAT,GAGH,IAHmF,IAA1DZ,EAAyD,EAAzDA,eAAgBa,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAC7DC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACvDD,EAAYI,KAAKH,GAKrB,OACI,eAACZ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASzB,MAAO,CAACsC,QAAS,IAA9D,UACI,eAACV,EAAA,EAAD,CAAQxC,QAAQ,YACZL,MAAO,UACPC,QAAS,kBAAMiC,EAAe,IAFlC,UAGI,cAAC,IAAD,IACA,cAAC,IAAD,OAEJ,cAACU,EAAA,EAAD,UACKM,EAAYvB,KAAI,SAAA6B,GAAM,OACnB,cAACX,EAAA,EAAD,CACA7C,MAAQwD,IAAWP,EAAe,UAAY,UAC9C5C,QAAUmD,IAAWP,EAAe,YAAc,WAClDhD,QAAS,kBAfMiC,EAeSsB,IAHxB,SAIEA,GAJWA,QAOrB,eAACX,EAAA,EAAD,CAAQxC,QAAQ,YACZL,MAAO,UACPC,QAAS,kBAAMiC,EAAegB,EAAYO,SAF9C,UAGI,cAAC,IAAD,IACA,cAAC,IAAD,U,8BCqGDC,MA7Hf,WACE,IAAMC,EAAeC,IAAMC,OAAO,CAChCC,QAAS,4CAEX,EAA0B1E,mBAAS,IAAnC,mBAAO2E,EAAP,KAAcC,EAAd,KACA,EAAoC5E,mBAAS,IAA7C,mBAAOgD,EAAP,KAAmBC,EAAnB,KACA,EAAoCjD,mBAAS,QAA7C,mBAAO+C,EAAP,KAAmBG,EAAnB,KACA,EAAsClD,mBAAS,GAA/C,mBAAO6D,EAAP,KAAoBf,EAApB,KACA,EAAuB9C,mBAAS,GAAzB2D,EAAP,oBACA,EAAgC3D,oBAAS,GAAzC,mBAAO6E,EAAP,KAAiBC,EAAjB,KACA,EAAoC9E,oBAAS,GAA7C,mBAAO+E,EAAP,KAAmBC,EAAnB,KACA,EAAsChF,qBAAtC,mBAAOiF,EAAP,KAAoBC,EAApB,KACA,EAAwClF,mBAAS,IAAjD,mBAAOmF,EAAP,KAAqBC,EAArB,KAEMC,EAAW,SAACC,GAChBF,EAAgBE,EAAIC,SAASC,KAAKC,SAClCP,EAAeI,EAAIC,SAASG,QAC5BV,GAAc,IAGVW,EAAWC,sBAAW,sBAAC,4BAAAC,EAAA,+EAEHtB,EAAauB,IAAI,cAAe,CACpDC,OAAQ,CACNC,SAAUhD,EACViD,MAAOlD,KALc,OAEnBmD,EAFmB,OAQzBtB,EAASsB,EAAQV,MACjBV,GAAY,GATa,gDAWzBO,EAAS,EAAD,IAXiB,yDAa1B,CAACrC,EAAYD,EAAYwB,IAE5B4B,qBAAU,WACRR,MACC,CAAC3C,EAAYD,EAAY4C,IAE5B,IAAMlD,EAAY,uCAAG,WAAOrC,GAAP,SAAAyF,EAAA,kEAEQ,KAAtBzF,EAAWqB,OAFG,gCAGT8C,EAAa6B,KAAb,aACJ,CACE,KAAQhG,EACR,MAAQ,IANG,uBAQTuF,IARS,uDAWjBN,EAAS,EAAD,IAXS,yDAAH,sDAeZxF,GAAY,uCAAG,WAAOc,GAAP,SAAAkF,EAAA,+EAEXtB,EAAa8B,OAAb,qBAAkC1F,IAFvB,uBAGXgF,IAHW,uDAKjBN,EAAS,EAAD,IALS,yDAAH,sDASZzF,GAAc,uCAAG,WAAOe,EAAMP,EAAYE,GAAzB,SAAAuF,EAAA,+EAEbtB,EAAa+B,MAAb,qBAAiC3F,GACrC,CACE,KAAQP,EACR,KAAQE,IALO,uBAObqF,IAPa,uDASnBN,EAAS,EAAD,IATW,yDAAH,0DAadkB,GAAc,WAClBvB,GAAc,IAGVwB,GAAkB3C,EAAcF,EAChC8C,GAAmBD,GAAkB7C,EACrCtB,GAAesC,EAAM+B,MAAMD,GAAkBD,IAEnD,OACE,eAACG,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACC,EAAA,EAAD,CAAY5F,QAAQ,KAAK6F,MAAM,SAA/B,kBACA,cAAC,EAAD,CAAWrE,aAAcA,IACzB,cAACI,EAAD,CACEG,WAAYA,EACZC,cAAeA,EACfF,WAAYA,EACZG,cAAeA,EACfJ,eAAgBA,IAEhB6B,EAAMN,OAAS,GAAKQ,GACpB,cAACnB,EAAD,CACEC,aAAcA,EACdC,WAAYe,EAAMN,OAClBR,YAAaA,EACbf,eAAgBA,IAGnB+B,GACC,cAACzC,EAAD,CAAW0E,MAAM,SACfjH,aAAcA,GACdwC,aAAcA,GACdzC,eAAgBA,MAGlBiF,GACA,cAAC1B,EAAA,EAAD,CAAMC,WAAS,EAAC2D,WAAW,SAASC,UAAU,SAA9C,SACE,cAAC7D,EAAA,EAAD,CAAMI,MAAI,EAAV,SAAW,cAAC0D,EAAA,EAAD,QAGf,cAACC,EAAA,EAAD,CAAUC,KAAMpC,EAAYqC,iBAAkB,IAAMC,QAASd,GAA7D,SACG,cAACe,EAAA,EAAD,CAAOC,SAAS,QAAQF,QAASd,GAAjC,2BACetB,EADf,sCAEkBE,WCpHZqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.17c4564f.chunk.js","sourcesContent":["import { ListItem, ListItemText, Checkbox, IconButton, TextField } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport React, { useState } from 'react';\n\nexport function ToDoItem({todo, handleTodoEdit, handleDelete }) {\n    const date = todo.createdAt;\n    const [toggleEdit, setToggleEdit] = useState(false);\n    const [inputValue, setInputValue] = useState(todo.name);\n    const [done] = useState(todo.done)\n\n    const handleKeyPress = (e, uuid) => {\n        if(e.key === 'Enter') {\n            e.preventDefault();\n            if(inputValue.trim() !== '') {\n                handleTodoEdit(uuid, inputValue, done);\n                setToggleEdit(false);\n            };\n        };\n        if (e.key === 'Escape') {\n            setToggleEdit(false);\n            setInputValue(todo.name);\n        };\n    };\n\n    const handleClick = () => {\n        setToggleEdit(false);\n        setInputValue(todo.name);\n    }\n\n    const handleDone = (todo) => {\n        handleTodoEdit(todo.uuid, inputValue, !todo.done )\n    }\n    return(\n        <ListItem >\n            <Checkbox checked={todo.done} \n            value={todo.uuid}\n            color='primary'\n            onClick={() => handleDone(todo)} />\n            {toggleEdit\n                ? <TextField \n                    fullWidth\n                    variant='outlined'\n                    autoFocus={true}\n                    value={inputValue}\n                    onChange={e => setInputValue(e.target.value)}\n                    onKeyDown={e => handleKeyPress(e, todo.uuid)} \n                    onBlur={handleClick}\n                  />\n                : <ListItemText \n                    style={{overflowWrap: 'break-word'}}\n                    primary={todo.name}\n                    onClick={() => setToggleEdit(true)}\n                  />}           \n            <ListItemText \n            style={{ textAlign: 'right'}}\n            secondary={date}\n            />\n            <IconButton onClick={() => handleDelete(todo.uuid)}>\n                <Delete />\n            </IconButton>\n        </ListItem>\n    )\n};","import React from 'react';\nimport {List} from '@material-ui/core/'\nimport { ToDoItem } from './ToDoItem';\n\nexport function ToDosList({ currentTodos, handleTodoEdit, handleDelete, handleDone}) {\n    return(\n        <List >\n            {currentTodos.map((todo) => (\n                <ToDoItem \n                    key={todo.uuid}\n                    todo={todo}\n                    handleDelete={handleDelete}\n                    handleTodoEdit={handleTodoEdit}\n                />\n            ))}\n        </List>\n    )\n};","import { TextField } from \"@material-ui/core\";\nimport { useState } from \"react\";\n\nfunction ToDoInput({handleSubmit}) {\n    const [inputValue, setInputValue] = useState('');\n    const handleChange = ({target}) => {\n         setInputValue(target.value)\n       };\n    return (\n        <form onSubmit = {event => {\n            event.preventDefault()\n            handleSubmit(inputValue)\n            setInputValue('')\n        }}>\n                <TextField\n                fullWidth\n                variant='outlined'\n                margin='normal'\n                onChange={handleChange} \n                value={inputValue}/> \n         </form>\n    );\n}\n\nexport default ToDoInput;","import { Grid, Button, ButtonGroup} from '@material-ui/core/';\n\nexport function Filter({ setCurrentPage, sortByDate, sortByDone, setSortByDone, setSortByDate }) {\n\n    const handleChange = () => {\n      setCurrentPage(1);\n    };\n\n    const handleSortLater = () => {\n        if(sortByDate !== 'desc') {\n          setSortByDate('desc');\n        };\n    };\n    \n    const handleSortEarlier = () => {\n        if(sortByDate !== 'asc') {\n          setSortByDate('asc');\n        };\n    };\n\n    const handleAll = () => {\n      if(sortByDone !== '') {\n        setSortByDone('');\n      };\n    };\n  \n    const handleDone = () => {\n      if(sortByDone !== 'done') {\n        setSortByDone('done');\n      };\n    };\n  \n    const handleUndone = () => {\n      if(sortByDone !== 'undone') {\n        setSortByDone('undone');\n      };\n    };\n    \n    return (\n        <Grid container spacing={4} justify=\"space-between\"  >\n          <Grid item onClick={handleChange}>\n            <ButtonGroup >\n              <Button onClick={handleAll}\n              color={(sortByDone === '') ? 'primary' : 'default'}\n              variant={(sortByDone === '') ? 'contained' : 'outlined'}\n              >All</Button>\n              <Button onClick={handleDone}\n              color={(sortByDone === 'done') ? 'primary' : 'default'}\n              variant={(sortByDone === 'done') ? 'contained' : 'outlined'}\n              >Done</Button>\n              <Button onClick={handleUndone}\n              color={(sortByDone === 'undone') ? 'primary' : 'default'}\n              variant={(sortByDone === 'undone') ? 'contained' : 'outlined'}\n              >Undone</Button>\n            </ButtonGroup>\n          </Grid>\n          <Grid item >\n            <ButtonGroup>\n              <Button onClick={handleSortLater}\n              color={(sortByDate === 'desc') ? 'primary' : 'default'}\n              variant={(sortByDate === 'desc') ? 'contained' : 'outlined'}\n              >Later</Button>\n              <Button onClick={handleSortEarlier}\n              color={(sortByDate === 'asc') ? 'primary' : 'default'}\n              variant={(sortByDate === 'asc') ? 'contained' : 'outlined'}\n              >Earlier</Button>\n            </ButtonGroup>\n          </Grid>\n        </Grid>\n    )\n};","import { Grid, Button, ButtonGroup} from '@material-ui/core/';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport function Pagination({ setCurrentPage, todosPerPage, totalTodos, currentPage }) {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(totalTodos / todosPerPage); i++) {\n        pageNumbers.push(i);\n      }\n      \n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n    return (\n        <Grid container spacing={4} justify=\"center\" style={{padding: 10}}>\n            <Button variant=\"contained\"\n                color={'default'}\n                onClick={() => setCurrentPage(1)}>\n                <NavigateBeforeIcon />\n                <NavigateBeforeIcon />\n            </Button>\n            <ButtonGroup>\n                {pageNumbers.map(number => (\n                    <Button key={number}\n                    color={(number === currentPage) ? 'primary' : 'default'}\n                    variant={(number === currentPage) ? 'contained' : 'outlined'}\n                    onClick={() => paginate(number)}\n                    >{number}</Button>\n                ))}\n            </ButtonGroup>\n            <Button variant=\"contained\"\n                color={'default'}\n                onClick={() => setCurrentPage(pageNumbers.length)}>\n                <NavigateNextIcon  />\n                <NavigateNextIcon  />\n            </Button>\n        </Grid>\n    )\n};","import {CircularProgress, Container, Grid, Typography, Snackbar } from '@material-ui/core/';\nimport './App.css';\nimport { ToDosList } from './components/ToDosList';\nimport ToDoInput from './components/ToDoInput';\nimport { Filter } from './components/Filter';\nimport { Pagination } from './components/Pagination';\nimport { useCallback, useEffect, useState } from 'react';\nimport {Alert} from '@material-ui/lab'\nimport axios from 'axios';\n\nfunction App() {\n  const instanceTodo = axios.create({\n    baseURL: \"https://todo-api-learning.herokuapp.com\"\n})\n  const [toDos, setToDos] = useState([]);\n  const [sortByDone, setSortByDone] = useState(''); \n  const [sortByDate, setSortByDate] = useState('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [todosPerPage] = useState(5);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorAlert, setErrorAlert] = useState(false);\n  const [errorStatus, setErrorStatus] = useState();\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const errCatch = (err) => {\n    setErrorMessage(err.response.data.message);\n    setErrorStatus(err.response.status);\n    setErrorAlert(true)\n  }\n  \n  const getTodos = useCallback(async () => {\n    try {\n      const getData = await instanceTodo.get('/v1/tasks/2', {\n        params: {\n          filterBy: sortByDone,\n          order: sortByDate \n        }\n      });\n      setToDos(getData.data);\n      setIsLoaded(true);\n    } catch (err) {\n      errCatch(err);\n    }\n  }, [sortByDone, sortByDate, instanceTodo])\n\n  useEffect(() => {\n    getTodos()\n  }, [sortByDone, sortByDate, getTodos])\n  \n  const handleSubmit = async (inputValue) => {\n    try {\n      if(inputValue.trim() !== '') {\n        await instanceTodo.post(`/v1/task/2`,\n          {\n            'name': inputValue,\n            'done': false\n          });\n        await getTodos();\n      }\n    } catch (err) {\n      errCatch(err);\n    }\n  };\n\n  const handleDelete = async (uuid) => {\n    try {\n      await instanceTodo.delete(`/v1/task/2/${uuid}`);\n      await getTodos();\n    } catch (err) {\n      errCatch(err);\n    }\n  }\n\n  const handleTodoEdit = async (uuid, inputValue, done) => {\n    try {\n      await instanceTodo.patch(`/v1/task/2/${uuid}`,\n        {\n          'name': inputValue,\n          'done': done\n        });\n      await getTodos();\n    } catch (err) {\n      errCatch(err);\n    }\n  };\n\n  const handleClose = () => {\n    setErrorAlert(false);\n  }\n\n  const indexOfLastTodo = currentPage * todosPerPage;\n  const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n  const currentTodos = toDos.slice(indexOfFirstTodo, indexOfLastTodo);\n\n  return (\n    <Container maxWidth=\"sm\" >\n      <Typography variant='h2' align='center'>ToDo</Typography>\n      <ToDoInput handleSubmit={handleSubmit} />\n      <Filter \n        sortByDone={sortByDone}\n        setSortByDone={setSortByDone}\n        sortByDate={sortByDate}\n        setSortByDate={setSortByDate}\n        setCurrentPage={setCurrentPage}\n      />\n      {(toDos.length > 5 && isLoaded) &&\n        <Pagination \n          todosPerPage={todosPerPage}\n          totalTodos={toDos.length}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage}\n        />\n      }\n      {isLoaded &&\n        <ToDosList align='center' \n          handleDelete={handleDelete}\n          currentTodos={currentTodos}\n          handleTodoEdit={handleTodoEdit}\n        />\n      }\n      {!isLoaded && \n        <Grid container alignItems='center' direction='column'>\n          <Grid item><CircularProgress/></Grid>\n        </Grid>\n      }\n      <Snackbar open={errorAlert} autoHideDuration={3000} onClose={handleClose}>\n         <Alert severity=\"error\" onClose={handleClose}>\n           { `Status: ${errorStatus}\n                Message: ${errorMessage}`}\n         </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}